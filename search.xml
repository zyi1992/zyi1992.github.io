<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Introduce for Implement of ZeroRpc]]></title>
      <url>zyidev.com/2017/04/23/20170423/</url>
      <content type="html"><![CDATA[<h1 id="zerorpc"><a href="#zerorpc" class="headerlink" title="zerorpc"></a>zerorpc</h1><h2 id="Introduction-amp-History"><a href="#Introduction-amp-History" class="headerlink" title="Introduction &amp; History"></a>Introduction &amp; History</h2><p>zerorpc features a dead-simple API for exposing any object or module over the<br>network, and a powerful gevent implementation which supports multiple ZMQ<br>socket types, streaming, heartbeats and more. It also includes a simple<br>command-line tool for interactive querying and introspection.</p>
<h2 id="Layers"><a href="#Layers" class="headerlink" title="Layers"></a>Layers</h2><p>Before diving into any details, let’s divide zerorpc’s protocol in three<br>different layers:</p>
<ol>
<li>Wire (or transport) layer; a combination of ZMQ and msgpack .</li>
<li>Event (or message) layer; this is probably the most complex part, since<br>it handles heartbeat, multiplexing, and events.</li>
<li>RPC layer; that’s where you can find the notion of request and response.</li>
</ol>
<h2 id="Wire-layer"><a href="#Wire-layer" class="headerlink" title="Wire layer"></a>Wire layer</h2><p>The wire layer is a combination of ZMQ and msgpack.</p>
<p>The basics:</p>
<ul>
<li>A zerorpc server can listen on as many ZMQ sockets as you like. Actually,<br>a ZMQ socket can bind to multiple addresses. It can even <em>connect</em> to the<br>clients (think about it as a worker connecting to a hub), but there are<br>some limitations in that case (see below). zerorpc doesn’t<br>have to do anything specific for that: ZMQ handles it automatically.</li>
<li>A zerorpc client can connect to multiple zerorpc servers. However, it should<br>create a new ZMQ socket for each connection.</li>
</ul>
<p>Since zerorpc implements heartbeat and streaming, it expects a kind of<br>persistent, end-to-end, connection between the client and the server.<br>It means that we cannot use the load-balancing features built into ZMQ.<br>Otherwise, the various messages composing a single conversation could<br>end up in different places.</p>
<p>That’s why there are limitations when the server connects to the client:<br>if there are multiple servers connecting to the same client, bad things<br>will happen.</p>
<blockquote>
<p>Note that the current implementation of zerorpc for Python doesn’t implement<br>its own load-balancing (yet), and still uses one ZMQ socket for connecting to<br>many servers. You can still use ZMQ load-balancing if you accept to disable<br>heartbeat and don’t use streamed responses.</p>
</blockquote>
<p>Every event from the event layer will be serialized with msgpack.</p>
<h2 id="Event-layer"><a href="#Event-layer" class="headerlink" title="Event layer"></a>Event layer</h2><p>The event layer is the most complex of all three layers. The majority of the<br>code for the Python implementation deals with this layer.</p>
<p>This layer provides:</p>
<ul>
<li>basic events;</li>
<li>multiplexed channels, allowing concurrency.</li>
</ul>
<h3 id="Basic-Events"><a href="#Basic-Events" class="headerlink" title="Basic Events"></a>Basic Events</h3><p>An event is a tuple (or array in JSON), containing in the following order:</p>
<ol>
<li>the event’s header -&gt; dictionary (or object in JSON)</li>
<li>the event’s names -&gt; string</li>
<li>the event’s arguments -&gt; any kind of value; but in practice, for backward<br>compatibility, it is recommended that this is a tuple (an empty one is OK).</li>
</ol>
<p>All events headers must contain an unique message id and the protocol version:</p>
<pre><code>{
    &quot;message_id&quot;: &quot;6ce9503a-bfb8-486a-ac79-e2ed225ace79&quot;,
    &quot;v&quot;: 3
}
</code></pre><p>The message id should be unique for the lifetime of the connection between a<br>client and a server.</p>
<blockquote>
<p>It doesn’t need to be an UUID, but again, for backward compatibility reasons,<br>it is better if it follows the UUID format.</p>
</blockquote>
<p>This document talks only about the version 3 of the protocol.</p>
<blockquote>
<p>The Python implementation has a lot of backward compatibility code, to handle<br>communication between all three versions of the protocol.</p>
</blockquote>
<h3 id="Multiplexed-Channels"><a href="#Multiplexed-Channels" class="headerlink" title="Multiplexed Channels"></a>Multiplexed Channels</h3><ul>
<li>Each new event opens a new channel implicitly.</li>
<li>The id of the new event will represent the channel id for the connection.</li>
<li><p>Each consecutive event on a channel will have the header field “response_to”<br>set to the channel id:</p>
<pre><code>{
    &quot;message_id&quot;: &quot;6ce9503a-bfb8-486a-ac79-e2ed225ace79&quot;,
    &quot;response_to&quot;: &quot;6636fb60-2bca-4ecb-8cb4-bbaaf174e9e6&quot;
}
</code></pre></li>
</ul>
<h4 id="Heartbeat"><a href="#Heartbeat" class="headerlink" title="Heartbeat"></a>Heartbeat</h4><p>Each part of a channel must send a heartbeat at regular intervals.</p>
<p>The default heartbeat frequency is 5 seconds.</p>
<blockquote>
<p>Note that technically, the heartbeat could be sitting on the connection level<br>instead of the channel level; but again, backward compatibility requires<br>to run it per channel at this point.</p>
</blockquote>
<p>The heartbeat is defined as follow:</p>
<ul>
<li>Event’s name: ‘_zpc_hb’</li>
<li>Event’s args: null</li>
</ul>
<p>When no heartbeat even is received after 2 heartbeat intervals (so, 10s by default),<br>we consider that the remote is lost.</p>
<blockquote>
<p>The Python implementation raises the LostRemote exception, and even<br>manages to cancel a long-running task on a LostRemote.</p>
</blockquote>
<h4 id="Buffering-or-congestion-control-on-channels"><a href="#Buffering-or-congestion-control-on-channels" class="headerlink" title="Buffering (or congestion control) on channels"></a>Buffering (or congestion control) on channels</h4><p>Both sides have a buffer for incoming messages on a channel. A peer can<br>send an advisory message to the other end of the channel, to inform it of the<br>size of its local buffer. This is a hint for the remote, to tell it “send me<br>more data!”</p>
<ul>
<li>Event’s name: ‘_zpc_more’</li>
<li>Event’s args: integer representing how many entries are available in the client’s buffer.</li>
</ul>
<h2 id="RPC-Layer"><a href="#RPC-Layer" class="headerlink" title="RPC Layer"></a>RPC Layer</h2><p>In the first version of zerorpc, this was the main (and only) layer.<br>Three kinds of events can occur at this layer: request (=function call),<br>response (=function return), error (=exception).</p>
<p>Request:</p>
<ul>
<li>Event’s name: string with the name of the method to call.</li>
<li>Event’s args: tuple of arguments for the method.</li>
</ul>
<p>Note: keyword arguments are not supported, because some languages don’t<br>support them. If you absolutely want to call functions with keyword<br>arguments, you can use a wrapper; e.g. expose a function like<br>“call_with_kwargs(function_name, args, kwargs)”, where args is a list,<br>and kwargs a dict. It might be an interesting idea to add such a<br>helper function into zerorpc default methods (see below for definitions<br>of existing default methods).</p>
<p>Response:</p>
<ul>
<li>Event’s name: string “OK”</li>
<li>Event’s args: tuple containing the returned value</li>
</ul>
<blockquote>
<p>Note that if the return value is a tuple, it is itself wrapped inside a<br>tuple - again, for backward compatibility reasons.</p>
</blockquote>
<p>If an error occurs (either at the transport level, or if an uncaught<br>exception is raised), we use the ERR event.</p>
<ul>
<li>Event’s name: string “ERR”</li>
<li>Event’s args: tuple of 3 strings:<ul>
<li>Name of the error (it should be the exception class name, or another<br>meaningful keyword).</li>
<li>Human representation of the error (preferably in english).</li>
<li>If possible a pretty printed traceback of the call stack when the error occured.</li>
</ul>
</li>
</ul>
<blockquote>
<p>A future version of the protocol will probably add a structured version of the<br>traceback, allowing machine-to-machine stack walking and better cross-language<br>exception representation.</p>
</blockquote>
<h2 id="Realize"><a href="#Realize" class="headerlink" title="Realize"></a>Realize</h2><h2 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h2><ul>
<li>Server</li>
<li>Client</li>
<li>ZMQ Socket</li>
<li>MessagePack</li>
<li>Event</li>
<li>Gevent</li>
<li>Channel</li>
<li>Queue</li>
</ul>
<h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><ul>
<li>Init server</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span><span class="params">(SocketBase, ServerBase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, methods=None, name=None, context=None, pool_size=None,</span><br><span class="line">            heartbeat=<span class="number">5</span>)</span>:</span></span><br><span class="line">        SocketBase.__init__(self, zmq.ROUTER, context)</span><br><span class="line">        <span class="keyword">if</span> methods <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            methods = self</span><br><span class="line">        name = name <span class="keyword">or</span> ServerBase._extract_name(methods)</span><br><span class="line">        methods = ServerBase._filter_methods(Server, self, methods)</span><br><span class="line">        ServerBase.__init__(self, self._events, methods, name, context,</span><br><span class="line">                pool_size, heartbeat)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServerBase</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, channel, methods=None, name=None, context=None,</span><br><span class="line">            pool_size=None, heartbeat=<span class="number">5</span>)</span>:</span></span><br><span class="line">        self._multiplexer = ChannelMultiplexer(channel)</span><br><span class="line">        <span class="keyword">if</span> methods <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            methods = self</span><br><span class="line">        self._context = context <span class="keyword">or</span> Context.get_instance()</span><br><span class="line">        self._name = name <span class="keyword">or</span> self._extract_name()</span><br><span class="line">        self._task_pool = gevent.pool.Pool(size=pool_size)</span><br><span class="line">        self._acceptor_task = <span class="keyword">None</span></span><br><span class="line">        self._methods = self._filter_methods(ServerBase, self, methods)</span><br><span class="line">        self._inject_builtins()</span><br><span class="line">        self._heartbeat_freq = heartbeat</span><br><span class="line">        <span class="keyword">for</span> (k, functor) <span class="keyword">in</span> iteritems(self._methods):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> isinstance(functor, DecoratorBase):</span><br><span class="line">                self._methods[k] = rep(functor)</span><br></pre></td></tr></table></figure>
<ul>
<li>Bind socket address</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bind</span><span class="params">(self, endpoint, resolve=True)</span>:</span></span><br><span class="line">    r = []</span><br><span class="line">    <span class="keyword">for</span> endpoint_ <span class="keyword">in</span> self._resolve_endpoint(endpoint, resolve):</span><br><span class="line">        r.append(self._socket.bind(endpoint_))</span><br><span class="line">        logger.debug(<span class="string">'bound to %s (status=%s)'</span>, endpoint_, r[-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure>
<ul>
<li>Receive client request</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">    self._acceptor_task = gevent.spawn(self._acceptor)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        self._acceptor_task.get()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        self.stop()</span><br><span class="line">        self._task_pool.join(raise_error=<span class="keyword">True</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_acceptor</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        initial_event = self._multiplexer.recv()</span><br><span class="line">        self._task_pool.spawn(self._async_task, initial_event)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_async_task</span><span class="params">(self, initial_event)</span>:</span></span><br><span class="line">    protocol_v1 = initial_event.header.get(<span class="string">u'v'</span>, <span class="number">1</span>) &lt; <span class="number">2</span></span><br><span class="line">    channel = self._multiplexer.channel(initial_event)</span><br><span class="line">    hbchan = HeartBeatOnChannel(channel, freq=self._heartbeat_freq,</span><br><span class="line">            passive=protocol_v1)</span><br><span class="line">    bufchan = BufferedChannel(hbchan)</span><br><span class="line">    exc_infos = <span class="keyword">None</span></span><br><span class="line">    event = bufchan.recv()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        self._context.hook_load_task_context(event.header)</span><br><span class="line">        functor = self._methods.get(event.name, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">if</span> functor <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> NameError(event.name)</span><br><span class="line">        functor.pattern.process_call(self._context, bufchan, event, functor)</span><br><span class="line">    <span class="keyword">except</span> LostRemote:</span><br><span class="line">        exc_infos = list(sys.exc_info())</span><br><span class="line">        self._print_traceback(protocol_v1, exc_infos)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        exc_infos = list(sys.exc_info())</span><br><span class="line">        human_exc_infos = self._print_traceback(protocol_v1, exc_infos)</span><br><span class="line">        reply_event = bufchan.new_event(<span class="string">u'ERR'</span>, human_exc_infos,</span><br><span class="line">                self._context.hook_get_task_context())</span><br><span class="line">        self._context.hook_server_inspect_exception(event, reply_event, exc_infos)</span><br><span class="line">        bufchan.emit_event(reply_event)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">del</span> exc_infos</span><br><span class="line">        bufchan.close()</span><br></pre></td></tr></table></figure>
<ul>
<li>Heartbeat check</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_heartbeat</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        gevent.sleep(self._heartbeat_freq)</span><br><span class="line">        <span class="keyword">if</span> self._remote_last_hb <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            self._remote_last_hb = time.time()</span><br><span class="line">        <span class="keyword">if</span> time.time() &gt; self._remote_last_hb + self._heartbeat_freq * <span class="number">2</span>:</span><br><span class="line">            self._lost_remote = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self._closed:</span><br><span class="line">                gevent.kill(self._parent_coroutine,</span><br><span class="line">                        self._lost_remote_exception())</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        self._channel.emit(<span class="string">u'_zpc_hb'</span>, (<span class="number">0</span>,))  <span class="comment"># 0 -&gt; compat with protocol v2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_recver</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        event = self._channel.recv()</span><br><span class="line">        <span class="keyword">if</span> self._compat_v2 <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            self._compat_v2 = event.header.get(<span class="string">u'v'</span>, <span class="number">0</span>) &lt; <span class="number">3</span></span><br><span class="line">        <span class="keyword">if</span> event.name == <span class="string">u'_zpc_hb'</span>:</span><br><span class="line">            self._remote_last_hb = time.time()</span><br><span class="line">            self._start_heartbeat()</span><br><span class="line">            <span class="keyword">if</span> self._compat_v2:</span><br><span class="line">                event.name = <span class="string">u'_zpc_more'</span></span><br><span class="line">                self._input_queue.put(event)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._input_queue.put(event)</span><br></pre></td></tr></table></figure>
<ul>
<li>Process and reply</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_call</span><span class="params">(self, context, channel, req_event, functor)</span>:</span></span><br><span class="line">    context.hook_server_before_exec(req_event)</span><br><span class="line">    result = functor(*req_event.args)</span><br><span class="line">    rep_event = channel.new_event(<span class="string">u'OK'</span>, (result,),</span><br><span class="line">            context.hook_get_task_context())</span><br><span class="line">    context.hook_server_after_exec(req_event, rep_event)</span><br><span class="line">    channel.emit_event(rep_event)</span><br></pre></td></tr></table></figure>
<h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><ul>
<li>Init client</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span><span class="params">(SocketBase, ClientBase)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, connect_to=None, context=None, timeout=<span class="number">30</span>, heartbeat=<span class="number">5</span>,</span><br><span class="line">            passive_heartbeat=False)</span>:</span></span><br><span class="line">        SocketBase.__init__(self, zmq.DEALER, context=context)</span><br><span class="line">        ClientBase.__init__(self, self._events, context, timeout, heartbeat,</span><br><span class="line">                passive_heartbeat)</span><br><span class="line">        <span class="keyword">if</span> connect_to:</span><br><span class="line">            self.connect(connect_to)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClientBase</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, channel, context=None, timeout=<span class="number">30</span>, heartbeat=<span class="number">5</span>,</span><br><span class="line">            passive_heartbeat=False)</span>:</span></span><br><span class="line">        self._multiplexer = ChannelMultiplexer(channel,</span><br><span class="line">                ignore_broadcast=<span class="keyword">True</span>)</span><br><span class="line">        self._context = context <span class="keyword">or</span> Context.get_instance()</span><br><span class="line">        self._timeout = timeout</span><br><span class="line">        self._heartbeat_freq = heartbeat</span><br><span class="line">        self._passive_heartbeat = passive_heartbeat</span><br></pre></td></tr></table></figure>
<ul>
<li>Connect socket address</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self, endpoint, resolve=True)</span>:</span></span><br><span class="line">    r = []</span><br><span class="line">    <span class="keyword">for</span> endpoint_ <span class="keyword">in</span> self._resolve_endpoint(endpoint, resolve):</span><br><span class="line">        r.append(self._socket.connect(endpoint_))</span><br><span class="line">        logger.debug(<span class="string">'connected to %s (status=%s)'</span>, endpoint_, r[-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure>
<ul>
<li>Send method request</li>
</ul>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def __call__(<span class="keyword">self</span>, <span class="function"><span class="keyword">method</span>, *<span class="title">args</span>, **<span class="title">kargs</span>):</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(<span class="function"><span class="keyword">method</span>, <span class="title">bytes</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">method</span> = <span class="title">method</span>.<span class="title">decode</span><span class="params">(<span class="string">'utf-8'</span>)</span></span><br><span class="line">    <span class="title">timeout</span> = <span class="title">kargs</span>.<span class="title">get</span><span class="params">(<span class="string">'timeout'</span>, <span class="keyword">self</span>._timeout)</span></span><br><span class="line">    <span class="title">channel</span> = <span class="title">self</span>._<span class="title">multiplexer</span>.<span class="title">channel</span><span class="params">()</span></span><br><span class="line">    <span class="title">hbchan</span> = <span class="title">HeartBeatOnChannel</span><span class="params">(channel, freq=<span class="keyword">self</span>._heartbeat_freq,</span><br><span class="line">            passive=<span class="keyword">self</span>._passive_heartbeat)</span></span><br><span class="line">    <span class="title">bufchan</span> = <span class="title">BufferedChannel</span><span class="params">(hbchan, inqueue_size=kargs.get(<span class="string">'slots'</span>, 100)</span>)</span><br><span class="line"></span><br><span class="line">    <span class="title">xheader</span> = <span class="title">self</span>._<span class="title">context</span>.<span class="title">hook_get_task_context</span><span class="params">()</span></span><br><span class="line">    <span class="title">request_event</span> = <span class="title">bufchan</span>.<span class="title">new_event</span><span class="params">(<span class="keyword">method</span>, args, xheader)</span></span><br><span class="line">    <span class="title">self</span>._<span class="title">context</span>.<span class="title">hook_client_before_request</span><span class="params">(request_event)</span></span><br><span class="line">    <span class="title">bufchan</span>.<span class="title">emit_event</span><span class="params">(request_event)</span></span><br><span class="line"></span><br><span class="line">    <span class="title">if</span> <span class="title">kargs</span>.<span class="title">get</span><span class="params">(<span class="string">'async'</span>, <span class="keyword">False</span>)</span> <span class="title">is</span> <span class="title">False</span>:</span></span><br><span class="line">        return <span class="keyword">self</span>._process_response(request_event, bufchan, timeout)</span><br><span class="line"></span><br><span class="line">    async_result = gevent.<span class="keyword">event</span>.AsyncResult()</span><br><span class="line">    gevent.spawn(<span class="keyword">self</span>._process_response, request_event, bufchan,</span><br><span class="line">            timeout).link(async_result)</span><br><span class="line">    return async_result</span><br></pre></td></tr></table></figure>
<ul>
<li>Heartbeat check</li>
<li>Receive result</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_process_response</span><span class="params">(self, request_event, bufchan, timeout)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">raise_error</span><span class="params">(ex)</span>:</span></span><br><span class="line">        bufchan.close()</span><br><span class="line">        self._context.hook_client_after_request(request_event, <span class="keyword">None</span>, ex)</span><br><span class="line">        <span class="keyword">raise</span> ex</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        reply_event = bufchan.recv(timeout=timeout)</span><br><span class="line">    <span class="keyword">except</span> TimeoutExpired:</span><br><span class="line">        raise_error(TimeoutExpired(timeout,</span><br><span class="line">                <span class="string">'calling remote method &#123;0&#125;'</span>.format(request_event.name)))</span><br><span class="line"></span><br><span class="line">    pattern = self._select_pattern(reply_event)</span><br><span class="line">    <span class="keyword">if</span> pattern <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        raise_error(RuntimeError(</span><br><span class="line">            <span class="string">'Unable to find a pattern for: &#123;0&#125;'</span>.format(request_event)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pattern.process_answer(self._context, bufchan, request_event,</span><br><span class="line">            reply_event, self._handle_remote_error)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_answer</span><span class="params">(self, context, channel, req_event, rep_event,</span><br><span class="line">        handle_remote_error)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> rep_event.name == <span class="string">u'ERR'</span>:</span><br><span class="line">            exception = handle_remote_error(rep_event)</span><br><span class="line">            context.hook_client_after_request(req_event, rep_event, exception)</span><br><span class="line">            <span class="keyword">raise</span> exception</span><br><span class="line">        context.hook_client_after_request(req_event, rep_event)</span><br><span class="line">        <span class="keyword">return</span> rep_event.args[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        channel.close()</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS中GCD多线程的使用]]></title>
      <url>zyidev.com/2016/05/30/20160530/</url>
      <content type="html"><![CDATA[<p>　ios有三种多线程编程技术，分别是NSThread,Cocoa NSOperation和GCD,GCD全称Grand Central Dispatch 是Apple开发的一个多核编程的解决方法，在iOS4.0开始之后才能使用。GCD是一个可以替代NSThread, NSOperationQueue, NSInvocationOperation等技术的很高效和强大的技术，而且其使用起来比前两者更加的简单方便，今天主要给大家介绍一下有关GCD的使用。<br>　　GCD的工作原理是：让程序平行排队的特定任务，根据可用的处理资源，安排他们在任何可用的处理器核心上执行任务。一个任务可以是一个函数或者是一个语句块（block）,GCD的依然是用线程实现，不过这样可以让普通开发者不用去关注其实现的细节,GCD中的队列称为dispatch queue。<br>Dispatch Queue分为三种：</p>
<blockquote>
<ol>
<li>Serial Dispatch Queue: 线性执行的线程队列，遵循FIFO(First In First Out)原则;</li>
<li>Concurrent Dispatch Queue: 并发执行的线程队列，并发执行的处理数取决于当前状态;</li>
<li>Main Dispatch Queue:在应用程序主线程上执行任务。 </li>
</ol>
</blockquote>
<hr>
<h2 id="dispatch-async"><a href="#dispatch-async" class="headerlink" title="dispatch_async"></a>dispatch_async</h2><p> 有的时候避免界面在处理耗时的操作时卡死，比如发起网络请求，下载数据，缓存图片等，我们需要在另外<br> 一个线程中处理这些操作，在这些操作完成后再通知主线程更新界面，看下面一段代码:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">        <span class="comment">//耗时操作</span></span><br><span class="line">        <span class="built_in">NSDate</span>* date = [<span class="built_in">NSDate</span> date];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"------%@"</span>,date);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSURL</span> * url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://d.hiphotos.baidu.com/image/pic/item/0823dd54564e9258ca2f34e79e82d158ccbf4e9b.jpg"</span>];</span><br><span class="line">        <span class="built_in">NSData</span> * data = [[<span class="built_in">NSData</span> alloc]initWithContentsOfURL:url];</span><br><span class="line">        <span class="built_in">UIImage</span> *image = [[<span class="built_in">UIImage</span> alloc]initWithData:data];</span><br><span class="line">        [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">4</span>];<span class="comment">//为了体现多线程的特点 在这里设置一个延时</span></span><br><span class="line">        <span class="keyword">if</span> (data != <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                <span class="comment">//结果处理</span></span><br><span class="line">                <span class="built_in">UIImageView</span>* imageview = [[<span class="built_in">UIImageView</span> alloc]initWithImage:image];</span><br><span class="line">                imageview<span class="variable">.frame</span> = [<span class="built_in">UIScreen</span> mainScreen]<span class="variable">.bounds</span>;</span><br><span class="line">                [<span class="keyword">self</span><span class="variable">.view</span> addSubview:imageview];</span><br><span class="line">                <span class="built_in">NSDate</span>* date = [<span class="built_in">NSDate</span> date];</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"------%@"</span>,date);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;);</span><br></pre></td></tr></table></figure></p>
<p> 我们在一个线程里完成下载图片的动作（为了体现多线程的作用，我们在这里设置一个延时）然后在另一个线程里把图片显示出来。<br> 系统给每个应用都提供的有队列，所以一般不用我们手动的去创建，我们只需要通过函数去获取队列就可以了<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 获取Main Dispatch Queue</span></span><br><span class="line"><span class="keyword">dispatch_queue_t</span> mainDispatchQueue = dispatch_get_main_queue();</span><br><span class="line"><span class="comment">// 获取Global Dispatch Queue</span></span><br><span class="line"><span class="keyword">dispatch_queue_t</span> globalDispatchQueueDefault = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="dispatch-group-async"><a href="#dispatch-group-async" class="headerlink" title="dispatch_group_async"></a>dispatch_group_async</h2><p>dispatch_group_async可以实现一组任务的监听，在一系列任务完成后再进行其他的操作。看一段例子：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line">dispatch_group_t group = dispatch_group_create();</span><br><span class="line">dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"线程1"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"线程2"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"线程3"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">　　<span class="comment">//dispatch_group_notify函数用来指定一个额外的block，该block将在group中所有任务完成后执行</span></span><br><span class="line">dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"更新操作"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>执行结果为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">线程<span class="number">1</span></span><br><span class="line">线程<span class="number">3</span></span><br><span class="line">线程<span class="number">2</span></span><br><span class="line">更新操作</span><br></pre></td></tr></table></figure></p>
<p>由结果可以看出，3个线程都执行完成后，更新操作才执行</p>
<hr>
<h2 id="dispatch-barrier-async"><a href="#dispatch-barrier-async" class="headerlink" title="dispatch_barrier_async"></a>dispatch_barrier_async</h2><p><em>dispatch_barrier_async</em>是在前面的任务执行结束后才执行，而且它后面的任务等它执行完成之后才会执行<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"gcdtest2"</span>, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程1"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">5</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程2"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    dispatch_barrier_async(queue, ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"barrier执行"</span>);</span><br><span class="line">        [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">5</span>];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程4"</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p>
<p>执行结果为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">线程<span class="number">1</span></span><br><span class="line">线程<span class="number">2</span></span><br><span class="line">barrier执行</span><br><span class="line">线程<span class="number">4</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="关于线程死锁"><a href="#关于线程死锁" class="headerlink" title="关于线程死锁"></a>关于线程死锁</h2><p>想想下面一段代码如果在主线程中执行会发生什么：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">   DLog(<span class="string">@"????????"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>在解决这个问题前 我们需要先了解同步（synchronization）\ 异步（asynchronization），串行（serial）\ 并行（concurrency）的区别。</p>
<p>同步和异步是针对当前当前线程和加入队列中的任务之间执行顺序的关系而言的。以同步的方式向队列中添加任务，会阻塞当前线程，直到同步到队列中的任务执行完毕返回后，才会接着执行当前的线程中的其他任务；以异步的方式向队列中添加的任务则不会阻塞当前线程，将任务添加到队列中后，不用等待前面添加的任务执行完毕。</p>
<p>串行和并行是针对一个队列中的多个任务执行顺序而言的。串行队列是指队列中的任务是一个接一个地执行的，队首的任务执行完毕后才能执行其后面的任务，直至执行队尾的任务；并行队列是指队列中的任务可以并发地执行，即开始执行队首的任务后，不必等其执行完毕就可以接着开始执行队首之后的任务，因此在某一时刻可能存在同时执行的多个任务。</p>
<p>所以上面的问题就很明显了，线程会被阻塞造成死锁。因为主线程是串行队列，里面的任务需要顺序执行，而在主线程中调用主线程执行任务x，任务x需要等待主线程任务执行完成，而x又持有主线程导致主线程的任务无法完成，所以就造成了死锁，Apple在iOS7以后废弃了<em>dispatch_get_current_queue</em>方法 应该也是出于这个考虑。</p>
]]></content>
    </entry>
    
  
  
</search>
