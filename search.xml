<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[分布式 Redis 解决方案Codis介绍]]></title>
      <url>zyidev.cn/2017/11/10/20171110/</url>
      <content type="html"><![CDATA[<h1 id="分布式-Redis-解决方案Codis介绍"><a href="#分布式-Redis-解决方案Codis介绍" class="headerlink" title="分布式 Redis 解决方案Codis介绍"></a>分布式 Redis 解决方案Codis介绍</h1><p>Codis 是一个分布式 Redis 解决方案, 对于上层的应用来说, 连接到 Codis Proxy 和连接原生的 Redis Server 没有显著区别 , 上层应用可以像使用单机的 Redis 一样使用, Codis 底层会处理请求的转发, 不停机的数据迁移等工作, 所有后边的一切事情, 对于前面的客户端来说是透明的, 可以简单的认为后边连接的是一个内存无限大的 Redis 服务。</p>
<h1 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h1><p><img src="https://raw.githubusercontent.com/CodisLabs/codis/release3.2/doc/pictures/architecture.png" alt="image"></p>
<h1 id="Codis-组件"><a href="#Codis-组件" class="headerlink" title="Codis 组件"></a>Codis 组件</h1><ul>
<li><p><strong>Codis Server</strong>：基于 redis-3.2.8 分支开发。增加了额外的数据结构，以支持 slot 有关的操作以及<a href="https://github.com/CodisLabs/codis/blob/release3.2/doc/redis_change_zh.md" target="_blank" rel="external">数据迁移指令</a>。</p>
</li>
<li><p><strong>Codis Proxy</strong>：客户端连接的 Redis 代理服务, 实现了 Redis 协议。 除<a href="https://github.com/CodisLabs/codis/blob/release3.2/doc/unsupported_cmds.md" target="_blank" rel="external">部分命令不支持以外</a>，表现的和原生的 Redis 没有区别。</p>
<ul>
<li>对于同一个业务集群而言，可以同时部署多个 codis-proxy 实例；</li>
<li>不同 codis-proxy 之间由 codis-dashboard 保证状态同步。</li>
</ul>
</li>
<li><p><strong>Codis Dashboard</strong>：集群管理工具，支持 codis-proxy、codis-server 的添加、删除，以及据迁移等操作。在集群状态发生改变时，codis-dashboard 维护集群下所有 codis-proxy 的状态的一致性。</p>
<ul>
<li>对于同一个业务集群而言，同一个时刻 codis-dashboard 只能有 0个或者1个；</li>
<li>所有对集群的修改都必须通过 codis-dashboard 完成。</li>
</ul>
</li>
<li><p><strong>Codis Admin</strong>：集群管理的命令行工具。</p>
<ul>
<li>可用于控制 codis-proxy、codis-dashboard 状态以及访问外部存储。</li>
</ul>
</li>
<li><p><strong>Codis FE</strong>：集群管理界面。</p>
<ul>
<li>多个集群实例共享可以共享同一个前端展示页面；</li>
<li>通过配置文件管理后端 codis-dashboard 列表，配置文件可自动更新。</li>
</ul>
</li>
<li><p><strong>Storage</strong>：为集群状态提供外部存储。</p>
<ul>
<li>提供 Namespace 概念，不同集群的会按照不同 product name 进行组织；</li>
<li>目前仅提供了 Zookeeper、Etcd、Fs 三种实现，但是提供了抽象的 interface 可自行扩展。</li>
</ul>
</li>
</ul>
<h2 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h2><h3 id="编译源码安装"><a href="#编译源码安装" class="headerlink" title="编译源码安装"></a>编译源码安装</h3><h4 id="1-安装-Go-运行环境-参考"><a href="#1-安装-Go-运行环境-参考" class="headerlink" title="1. 安装 Go 运行环境 参考"></a>1. 安装 Go 运行环境 <a href="https://golang.org/doc/install" target="_blank" rel="external">参考</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$vim</span> /etc/profile</span><br><span class="line"><span class="comment">#add</span></span><br><span class="line"><span class="built_in">export</span> GOROOT=/usr/<span class="built_in">local</span>/go</span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$HOME</span>/go</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$GOROOT</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<p>安装完成后可以运行下列命令进行检测：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.<span class="number">7.3</span> linux/amd64</span><br></pre></td></tr></table></figure>
<h4 id="2-设置编译环境"><a href="#2-设置编译环境" class="headerlink" title="2. 设置编译环境"></a>2. 设置编译环境</h4><p><strong>注意 <code>$GOPATH</code> 是本机所有第三方库 go 项目所在目录，Codis 仅是其中之一。</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go env GOPATH</span><br><span class="line">/home/codis/gopath</span><br></pre></td></tr></table></figure>
<h4 id="3-下载-Codis-源代码"><a href="#3-下载-Codis-源代码" class="headerlink" title="3. 下载 Codis 源代码"></a>3. 下载 Codis 源代码</h4><p>Codis 源代码需要下载到 <code>$GOPATH/src/github.com/CodisLabs/codis</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p <span class="variable">$GOPATH</span>/src/github.com/CodisLabs</span><br><span class="line">$ <span class="built_in">cd</span> <span class="variable">$_</span> &amp;&amp; git <span class="built_in">clone</span> https://github.com/CodisLabs/codis.git -b release3.<span class="number">2</span></span><br></pre></td></tr></table></figure>
<h4 id="4-编译-Codis-源代码"><a href="#4-编译-Codis-源代码" class="headerlink" title="4. 编译 Codis 源代码"></a>4. 编译 Codis 源代码</h4><ul>
<li>直接通过 make 进行编译，会看到如下输出：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/CodisLabs/codis</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure>
<h2 id="启动及参数"><a href="#启动及参数" class="headerlink" title="启动及参数"></a>启动及参数</h2><h4 id="Codis-Dashboard"><a href="#Codis-Dashboard" class="headerlink" title="Codis Dashboard"></a>Codis Dashboard</h4><h5 id="启动命令："><a href="#启动命令：" class="headerlink" title="启动命令："></a>启动命令：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nohup ./bin/codis-dashboard --ncpu=<span class="number">4</span> --config=dashboard.toml \</span><br><span class="line">    --log=dashboard.log --log-level=WARN &amp;</span><br></pre></td></tr></table></figure>
<p>默认配置文件 <code>dashboard.toml</code> 可由 codis-dashboard 生成。</p>
<ul>
<li>启动参数说明：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/codis-dashboard -h</span><br><span class="line">Usage:</span><br><span class="line">    codis-dashboard [--ncpu=N] [--config=CONF] [--log=FILE] [--log-level=LEVEL] [--host-admin=ADDR]</span><br><span class="line">    codis-dashboard  --default-config</span><br><span class="line">    codis-dashboard  --version</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    --ncpu=N                    最大使用 CPU 个数</span><br><span class="line">    -c CONF, --config=CONF      指定启动配置文件</span><br><span class="line">    <span class="operator">-l</span> FILE, --log=FILE         设置 <span class="built_in">log</span> 输出文件</span><br><span class="line">    --log-level=LEVEL           设置 <span class="built_in">log</span> 输出等级：INFO,WARN,DEBUG,ERROR；默认INFO，推荐WARN</span><br></pre></td></tr></table></figure>
<ul>
<li>默认配置文件：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/codis-dashboard --default-config | tee dashboard.toml</span><br><span class="line"><span class="comment">##################################################</span></span><br><span class="line"><span class="comment">#                                                #</span></span><br><span class="line"><span class="comment">#                  Codis-Dashboard               #</span></span><br><span class="line"><span class="comment">#                                                #</span></span><br><span class="line"><span class="comment">##################################################</span></span><br><span class="line"></span><br><span class="line">coordinator_name = <span class="string">"zookeeper"</span></span><br><span class="line">coordinator_addr = <span class="string">"10.10.10.8:2181"</span></span><br><span class="line"><span class="comment">#coordinator_auth = ""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set Codis Product Name/Auth.</span></span><br><span class="line">product_name = <span class="string">"codis-demo"</span></span><br><span class="line">product_auth = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set bind address for admin(rpc), tcp only.</span></span><br><span class="line">admin_addr = <span class="string">"10.10.10.8:18080"</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">coordinator_name</td>
<td style="text-align:left">外部存储类型，接受 zookeeper/etcd</td>
</tr>
<tr>
<td style="text-align:left">coordinator_addr</td>
<td style="text-align:left">外部存储地址</td>
</tr>
<tr>
<td style="text-align:left">product_name</td>
<td style="text-align:left">集群名称，满足正则 <code>\w[\w\.\-]*</code></td>
</tr>
<tr>
<td style="text-align:left">product_auth</td>
<td style="text-align:left">集群密码，默认为空</td>
</tr>
<tr>
<td style="text-align:left">admin_addr</td>
<td style="text-align:left">RESTful API 端口</td>
</tr>
</tbody>
</table>
<h4 id="Codis-Proxy"><a href="#Codis-Proxy" class="headerlink" title="Codis Proxy"></a>Codis Proxy</h4><h5 id="启动命令：-1"><a href="#启动命令：-1" class="headerlink" title="启动命令："></a>启动命令：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nohup ./bin/codis-proxy --ncpu=<span class="number">4</span> --config=proxy.toml \</span><br><span class="line">    --log=proxy.log --log-level=WARN &amp;</span><br></pre></td></tr></table></figure>
<p>默认配置文件 <code>proxy.toml</code> 可由 codis-proxy 生成。</p>
<p>codis-proxy 启动后，处于 <code>waiting</code> 状态，监听 <code>proxy_addr</code> 地址，但是不会 <code>accept</code> 连接，添加到集群并完成集群状态的同步，才能改变状态为 <code>online</code>。添加的方法有以下两种：</p>
<ul>
<li>通过 codis-fe 添加：通过 <code>Add Proxy</code> 按钮，将 <code>admin_addr</code> 加入到集群中；</li>
<li>通过 codis-admin 命令行工具添加，方法如下：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/codis-admin --dashboard=<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">18080</span> --create-proxy -x <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">11080</span></span><br></pre></td></tr></table></figure>
<p>其中 <code>127.0.0.1:18080</code> 以及 <code>127.0.0.1:11080</code> 分别为 dashboard 和 proxy 的 <code>admin_addr</code> 地址；</p>
<p>添加过程中，dashboard 会完成如下一系列动作：</p>
<ul>
<li>获取 proxy 信息，对集群 name 以及 auth 进行验证，并将其信息写入到外部存储中；</li>
<li>同步 slots 状态；</li>
<li><p>标记 proxy 状态为 <code>online</code>，此后 proxy 开始 <code>accept</code> 连接并开始提供服务；</p>
</li>
<li><p>启动参数说明：</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/codis-proxy -h</span><br><span class="line">Usage:</span><br><span class="line">	codis-proxy [--ncpu=N] [--config=CONF] [--log=FILE] [--log-level=LEVEL] [--host-admin=ADDR] [--host-proxy=ADDR] [--ulimit=NLIMIT]</span><br><span class="line">	codis-proxy  --default-config</span><br><span class="line">	codis-proxy  --version</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">	--ncpu=N                    最大使用 CPU 个数</span><br><span class="line">	-c CONF, --config=CONF      指定启动配置文件</span><br><span class="line">	<span class="operator">-l</span> FILE, --log=FILE         设置 <span class="built_in">log</span> 输出文件</span><br><span class="line">	--log-level=LEVEL           设置 <span class="built_in">log</span> 输出等级：INFO,WARN,DEBUG,ERROR；默认INFO，推荐WARN</span><br><span class="line">	--ulimit=NLIMIT             检查 <span class="built_in">ulimit</span> -n 的结果，确保运行时最大文件描述不少于 NLIMIT</span><br></pre></td></tr></table></figure>
<ul>
<li>默认配置文件：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/codis-proxy --default-config | tee proxy.toml</span><br><span class="line"><span class="comment">##################################################</span></span><br><span class="line"><span class="comment">#                                                #</span></span><br><span class="line"><span class="comment">#                  Codis-Proxy                   #</span></span><br><span class="line"><span class="comment">#                                                #</span></span><br><span class="line"><span class="comment">##################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set Codis Product &#123;Name/Auth&#125;.</span></span><br><span class="line">product_name = <span class="string">"codis-demo"</span></span><br><span class="line">product_auth = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set bind address for admin(rpc), tcp only.</span></span><br><span class="line">admin_addr = <span class="string">"10.10.10.8:11080"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set bind address for proxy, proto_type can be "tcp", "tcp4", "tcp6", "unix" or "unixpacket".</span></span><br><span class="line">proto_<span class="built_in">type</span> = <span class="string">"tcp4"</span></span><br><span class="line">proxy_addr = <span class="string">"10.10.10.8:19000"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set jodis address &amp; session timeout.</span></span><br><span class="line">jodis_addr = <span class="string">""</span></span><br><span class="line">jodis_timeout = <span class="number">10</span></span><br><span class="line">jodis_compatible = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Proxy will ping-pong backend redis periodly to keep-alive</span></span><br><span class="line">backend_ping_period = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If there is no request from client for a long time, the connection will be droped. Set 0 to disable.</span></span><br><span class="line">session_max_timeout = <span class="number">1800</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Buffer size for each client connection.</span></span><br><span class="line">session_max_bufsize = <span class="number">131072</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Number of buffered requests for each client connection.</span></span><br><span class="line"><span class="comment"># Make sure this is higher than the max number of requests for each pipeline request, or your client may be blocked.</span></span><br><span class="line">session_max_pipeline = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set period between keep alives. Set 0 to disable.</span></span><br><span class="line">session_keepalive_period = <span class="number">60</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">product_name</td>
<td style="text-align:left">集群名称，参考 dashboard 参数说明</td>
</tr>
<tr>
<td style="text-align:left">product_auth</td>
<td style="text-align:left">集群密码，默认为空</td>
</tr>
<tr>
<td style="text-align:left">admin_addr</td>
<td style="text-align:left">RESTful API 端口</td>
</tr>
<tr>
<td style="text-align:left">proto_type</td>
<td style="text-align:left">Redis 端口类型，接受 tcp/tcp4/tcp6/unix/unixpacket</td>
</tr>
<tr>
<td style="text-align:left">proxy_addr</td>
<td style="text-align:left">Redis 端口地址或者路径</td>
</tr>
<tr>
<td style="text-align:left">jodis_addr</td>
<td style="text-align:left">Jodis 注册 zookeeper 地址</td>
</tr>
<tr>
<td style="text-align:left">jodis_timeout</td>
<td style="text-align:left">Jodis 注册 session timeout 时间，单位 second</td>
</tr>
<tr>
<td style="text-align:left">jodis_compatible</td>
<td style="text-align:left"><strong>Jodis 注册 zookeeper 的路径</strong></td>
</tr>
<tr>
<td style="text-align:left">backend_ping_period</td>
<td style="text-align:left">与 codis-server 探活周期，单位 second，0 表示禁止</td>
</tr>
<tr>
<td style="text-align:left">session_max_timeout</td>
<td style="text-align:left">与 client 连接最大读超时，单位 second，0 表示禁止</td>
</tr>
<tr>
<td style="text-align:left">session_max_bufsize</td>
<td style="text-align:left">与 client 连接读写缓冲区大小，单位 byte</td>
</tr>
<tr>
<td style="text-align:left">session_max_pipeline</td>
<td style="text-align:left">与 client 连接最大的 pipeline 大小</td>
</tr>
<tr>
<td style="text-align:left">session_keepalive_period</td>
<td style="text-align:left">与 client 的 tcp keepalive 周期，仅 tcp 有效，0 表示禁止</td>
</tr>
</tbody>
</table>
<h4 id="Codis-Server"><a href="#Codis-Server" class="headerlink" title="Codis Server"></a>Codis Server</h4><ul>
<li><p>启动 ./bin/codis-server，与启动普通 redis 的方法一致。</p>
</li>
<li><p>启动完成后，可以通过 codis-fe 提供的界面或者 codis-admin 命令行工具添加到集群中。</p>
</li>
</ul>
<h4 id="Codis-FE（可选组件）"><a href="#Codis-FE（可选组件）" class="headerlink" title="Codis FE（可选组件）"></a>Codis FE（可选组件）</h4><h5 id="启动命令：-2"><a href="#启动命令：-2" class="headerlink" title="启动命令："></a>启动命令：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nohup ./bin/codis-fe --ncpu=<span class="number">4</span> --log=fe.log --log-level=WARN \</span><br><span class="line">    --zookeeper=<span class="number">10.10</span>.<span class="number">10.8</span>:<span class="number">2181</span> --listen=<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8889</span> &amp;</span><br></pre></td></tr></table></figure>
<ul>
<li>启动参数说明：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/codis-fe -h</span><br><span class="line">Usage:</span><br><span class="line">	codis-fe [--ncpu=N] [--log=FILE] [--log-level=LEVEL] [--assets-dir=PATH] (--dashboard-list=FILE|--zookeeper=ADDR|--etcd=ADDR|--filesystem=ROOT) --listen=ADDR</span><br><span class="line">	codis-fe  --version</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">	--ncpu=N                        最大使用 CPU 个数</span><br><span class="line">	<span class="operator">-d</span> LIST, --dashboard-list=LIST  配置文件，能够自动刷新</span><br><span class="line">	<span class="operator">-l</span> FILE, --log=FILE             设置 <span class="built_in">log</span> 输出文件</span><br><span class="line">	--log-level=LEVEL               设置 <span class="built_in">log</span> 输出等级：INFO,WARN,DEBUG,ERROR；默认INFO，推荐WARN</span><br><span class="line">	--listen=ADDR                   HTTP 服务端口</span><br></pre></td></tr></table></figure>
<p>配置文件 codis.json 可以手动编辑，也可以通过 codis-admin 从外部存储中拉取，例如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/codis-admin --dashboard-list --zookeeper=<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2181</span> | tee codis.json</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"codis-demo"</span>,</span><br><span class="line">        <span class="string">"dashboard"</span>: <span class="string">"127.0.0.1:18080"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"codis-demo2"</span>,</span><br><span class="line">        <span class="string">"dashboard"</span>: <span class="string">"127.0.0.1:28080"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h4 id="Codis-Admin（命令行工具）"><a href="#Codis-Admin（命令行工具）" class="headerlink" title="Codis Admin（命令行工具）"></a>Codis Admin（命令行工具）</h4><p><strong>注意：使用 codis-admin 是十分危险的。</strong></p>
<h5 id="codis-dashboard-异常退出的修复"><a href="#codis-dashboard-异常退出的修复" class="headerlink" title="codis-dashboard 异常退出的修复"></a>codis-dashboard 异常退出的修复</h5><p>当 codis-dashboard 启动时，会在外部存储上存放一条数据，用于存储 dashboard 信息，同时作为 LOCK 存在。当 codis-dashboard 安全退出时，会主动删除该数据。当 codis-dashboard 异常退出时，由于之前 LOCK 未安全删除，重启往往会失败。因此 codis-admin 提供了强制删除工具：</p>
<ol>
<li>确认 codis-dashboard 进程已经退出（<strong>很重要</strong>）；</li>
<li>运行 codis-admin 删除 LOCK：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/codis-admin --remove-lock --product=codis-demo --zookeeper=<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2181</span></span><br></pre></td></tr></table></figure>
<h5 id="codis-proxy-异常退出的修复"><a href="#codis-proxy-异常退出的修复" class="headerlink" title="codis-proxy 异常退出的修复"></a>codis-proxy 异常退出的修复</h5><p>通常 codis-proxy 都是通过 codis-dashboard 进行移除，移除过程中 codis-dashboard 为了安全会向 codis-proxy 发送 <code>offline</code> 指令，成功后才会将 proxy 信息从外部存储中移除。如果 codis-proxy 异常退出，该操作会失败。此时可以使用 codis-admin 工具进行移除：</p>
<ol>
<li>确认 codis-proxy 进程已经退出（<strong>很重要</strong>）；</li>
<li>运行 codis-admin 删除 proxy：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/codis-admin --dashboard=<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">18080</span> --remove-proxy --addr=<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">11080</span> --force</span><br></pre></td></tr></table></figure>
<p>选项 <code>--force</code> 表示，无论 <code>offline</code> 操作是否成功，都从外部存储中将该节点删除。所以操作前，一定要确认该 codis-proxy 进程已经退出。</p>
<h2 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h2><p>Zookeeper是一个针对大型应用提供高可用的数据管理、应用程序协调服务的分布式服务框架，基于对Paxos算法的实现，使该框架保证了分布式环境中数据的强一致性，提供的功能包括：配置维护、统一命名服务、状态同步服务、集群管理等。</p>
<h4 id="ZooKeeper-典型的应用场景–配置管理（Configuration-Management）"><a href="#ZooKeeper-典型的应用场景–配置管理（Configuration-Management）" class="headerlink" title="ZooKeeper 典型的应用场景–配置管理（Configuration Management）"></a>ZooKeeper 典型的应用场景–配置管理（Configuration Management）</h4><blockquote>
<p>配置的管理在分布式应用环境中很常见，例如同一个应用系统需要多台 PC Server 运行，但是它们运行的应用系统的某些配置项是相同的，如果要修改这些相同的配置项，那么就必须同时修改每台运行这个应用系统的 PC Server，这样非常麻烦而且容易出错。<br>像这样的配置信息完全可以交给 Zookeeper 来管理，将配置信息保存在 Zookeeper 的某个目录节点中，然后将所有需要修改的应用机器监控配置信息的状态，一旦配置信息发生变化，每台应用机器就会收到 Zookeeper 的通知，然后从 Zookeeper 获取新的配置信息应用到系统中。</p>
</blockquote>
<p>Codis的特点是动态的扩容缩容，对业务透明；zk除了存储路由信息，同时还作为一个事件同步的媒介服务，比如变更master或者数据迁移这样的事情，需要所有的proxy通过监听特定zk事件来实现 可以说zk被codis当做了一个可靠的rpc的信道来使用。因为只有集群变更的admin时候会往zk上发事件，proxy监听到以后，回复在zk上，admin收到各个proxy的回复后才继续。本身集群变更的事情不会经常发生，所以数据量不大。</p>
<h2 id="Codis-扩容"><a href="#Codis-扩容" class="headerlink" title="Codis 扩容"></a>Codis 扩容</h2><h3 id="通过fe添加group"><a href="#通过fe添加group" class="headerlink" title="通过fe添加group"></a>通过fe添加group</h3><p>通过web浏览器访问集群管理页面 选择我们刚搭建的集群 codis-demo，在 Proxy 栏可看到我们已经启动的 Proxy， 添加 NEW GROUP，NEW GROUP 行输入 x，再点击 NEW GROUP 即可 添加 Codis Server，Add Server 行输入我们刚刚启动的 codis-server 地址，添加到我们刚新建的 Group，然后再点击 Add Server 按钮即可</p>
<h3 id="通过fe初始化slot"><a href="#通过fe初始化slot" class="headerlink" title="通过fe初始化slot"></a>通过fe初始化slot</h3><p>新增的集群 slot 状态是 offline，因此我们需要对它进行初始化（将 1024 个 slot 分配到各个 group），而初始化最快的方法可通过 fe 提供的 rebalance all slots 按钮来做，新增GROUP时需要同样的操作，即可将数据平均的分配到各个GROUP。</p>
<h2 id="Codis-容错，负载均衡，一致性"><a href="#Codis-容错，负载均衡，一致性" class="headerlink" title="Codis 容错，负载均衡，一致性"></a>Codis 容错，负载均衡，一致性</h2><p>因为 codis-proxy 是无状态的，可以比较容易的搭多个实例，利用HAProxy或结合keepalived达到高可用性和横向扩展。实现负载均衡。</p>
<p>对下层的 redis 实例来说，当一个 group 的 master 挂掉的时候，应该让管理员清楚，并手动的操作，因为这涉及到了数据一致性等问题（redis的主从同步是最终一致性的）。因此 codis 不会自动的将某个 slave 升级成 master。</p>
<p>需要注意，codis 将其中一个 slave 升级为 master 时，该组内其他 slave 实例是不会自动改变状态的，这些 slave 仍将试图从旧的 master 上同步数据，因而会导致组内新的 master 和其他 slave 之间的数据不一致。因此当出现主从切换时，需要管理员手动创建新的 sync action 来完成新 master 与 slave 之间的数据同步。</p>
<p>可以选择Redis Sentinel实现主从的自动切换。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Introduce for Implement of ZeroRpc]]></title>
      <url>zyidev.cn/2017/04/23/20170423/</url>
      <content type="html"><![CDATA[<h1 id="zerorpc"><a href="#zerorpc" class="headerlink" title="zerorpc"></a>zerorpc</h1><h2 id="Introduction-amp-History"><a href="#Introduction-amp-History" class="headerlink" title="Introduction &amp; History"></a>Introduction &amp; History</h2><p>zerorpc features a dead-simple API for exposing any object or module over the<br>network, and a powerful gevent implementation which supports multiple ZMQ<br>socket types, streaming, heartbeats and more. It also includes a simple<br>command-line tool for interactive querying and introspection.</p>
<h2 id="Layers"><a href="#Layers" class="headerlink" title="Layers"></a>Layers</h2><p>Before diving into any details, let’s divide zerorpc’s protocol in three<br>different layers:</p>
<ol>
<li>Wire (or transport) layer; a combination of ZMQ and msgpack .</li>
<li>Event (or message) layer; this is probably the most complex part, since<br>it handles heartbeat, multiplexing, and events.</li>
<li>RPC layer; that’s where you can find the notion of request and response.</li>
</ol>
<h2 id="Wire-layer"><a href="#Wire-layer" class="headerlink" title="Wire layer"></a>Wire layer</h2><p>The wire layer is a combination of ZMQ and msgpack.</p>
<p>The basics:</p>
<ul>
<li>A zerorpc server can listen on as many ZMQ sockets as you like. Actually,<br>a ZMQ socket can bind to multiple addresses. It can even <em>connect</em> to the<br>clients (think about it as a worker connecting to a hub), but there are<br>some limitations in that case (see below). zerorpc doesn’t<br>have to do anything specific for that: ZMQ handles it automatically.</li>
<li>A zerorpc client can connect to multiple zerorpc servers. However, it should<br>create a new ZMQ socket for each connection.</li>
</ul>
<p>Since zerorpc implements heartbeat and streaming, it expects a kind of<br>persistent, end-to-end, connection between the client and the server.<br>It means that we cannot use the load-balancing features built into ZMQ.<br>Otherwise, the various messages composing a single conversation could<br>end up in different places.</p>
<p>That’s why there are limitations when the server connects to the client:<br>if there are multiple servers connecting to the same client, bad things<br>will happen.</p>
<blockquote>
<p>Note that the current implementation of zerorpc for Python doesn’t implement<br>its own load-balancing (yet), and still uses one ZMQ socket for connecting to<br>many servers. You can still use ZMQ load-balancing if you accept to disable<br>heartbeat and don’t use streamed responses.</p>
</blockquote>
<p>Every event from the event layer will be serialized with msgpack.</p>
<h2 id="Event-layer"><a href="#Event-layer" class="headerlink" title="Event layer"></a>Event layer</h2><p>The event layer is the most complex of all three layers. The majority of the<br>code for the Python implementation deals with this layer.</p>
<p>This layer provides:</p>
<ul>
<li>basic events;</li>
<li>multiplexed channels, allowing concurrency.</li>
</ul>
<h3 id="Basic-Events"><a href="#Basic-Events" class="headerlink" title="Basic Events"></a>Basic Events</h3><p>An event is a tuple (or array in JSON), containing in the following order:</p>
<ol>
<li>the event’s header -&gt; dictionary (or object in JSON)</li>
<li>the event’s names -&gt; string</li>
<li>the event’s arguments -&gt; any kind of value; but in practice, for backward<br>compatibility, it is recommended that this is a tuple (an empty one is OK).</li>
</ol>
<p>All events headers must contain an unique message id and the protocol version:</p>
<pre><code>{
    &quot;message_id&quot;: &quot;6ce9503a-bfb8-486a-ac79-e2ed225ace79&quot;,
    &quot;v&quot;: 3
}
</code></pre><p>The message id should be unique for the lifetime of the connection between a<br>client and a server.</p>
<blockquote>
<p>It doesn’t need to be an UUID, but again, for backward compatibility reasons,<br>it is better if it follows the UUID format.</p>
</blockquote>
<p>This document talks only about the version 3 of the protocol.</p>
<blockquote>
<p>The Python implementation has a lot of backward compatibility code, to handle<br>communication between all three versions of the protocol.</p>
</blockquote>
<h3 id="Multiplexed-Channels"><a href="#Multiplexed-Channels" class="headerlink" title="Multiplexed Channels"></a>Multiplexed Channels</h3><ul>
<li>Each new event opens a new channel implicitly.</li>
<li>The id of the new event will represent the channel id for the connection.</li>
<li><p>Each consecutive event on a channel will have the header field “response_to”<br>set to the channel id:</p>
<pre><code>{
    &quot;message_id&quot;: &quot;6ce9503a-bfb8-486a-ac79-e2ed225ace79&quot;,
    &quot;response_to&quot;: &quot;6636fb60-2bca-4ecb-8cb4-bbaaf174e9e6&quot;
}
</code></pre></li>
</ul>
<h4 id="Heartbeat"><a href="#Heartbeat" class="headerlink" title="Heartbeat"></a>Heartbeat</h4><p>Each part of a channel must send a heartbeat at regular intervals.</p>
<p>The default heartbeat frequency is 5 seconds.</p>
<blockquote>
<p>Note that technically, the heartbeat could be sitting on the connection level<br>instead of the channel level; but again, backward compatibility requires<br>to run it per channel at this point.</p>
</blockquote>
<p>The heartbeat is defined as follow:</p>
<ul>
<li>Event’s name: ‘_zpc_hb’</li>
<li>Event’s args: null</li>
</ul>
<p>When no heartbeat even is received after 2 heartbeat intervals (so, 10s by default),<br>we consider that the remote is lost.</p>
<blockquote>
<p>The Python implementation raises the LostRemote exception, and even<br>manages to cancel a long-running task on a LostRemote.</p>
</blockquote>
<h4 id="Buffering-or-congestion-control-on-channels"><a href="#Buffering-or-congestion-control-on-channels" class="headerlink" title="Buffering (or congestion control) on channels"></a>Buffering (or congestion control) on channels</h4><p>Both sides have a buffer for incoming messages on a channel. A peer can<br>send an advisory message to the other end of the channel, to inform it of the<br>size of its local buffer. This is a hint for the remote, to tell it “send me<br>more data!”</p>
<ul>
<li>Event’s name: ‘_zpc_more’</li>
<li>Event’s args: integer representing how many entries are available in the client’s buffer.</li>
</ul>
<h2 id="RPC-Layer"><a href="#RPC-Layer" class="headerlink" title="RPC Layer"></a>RPC Layer</h2><p>In the first version of zerorpc, this was the main (and only) layer.<br>Three kinds of events can occur at this layer: request (=function call),<br>response (=function return), error (=exception).</p>
<p>Request:</p>
<ul>
<li>Event’s name: string with the name of the method to call.</li>
<li>Event’s args: tuple of arguments for the method.</li>
</ul>
<p>Note: keyword arguments are not supported, because some languages don’t<br>support them. If you absolutely want to call functions with keyword<br>arguments, you can use a wrapper; e.g. expose a function like<br>“call_with_kwargs(function_name, args, kwargs)”, where args is a list,<br>and kwargs a dict. It might be an interesting idea to add such a<br>helper function into zerorpc default methods (see below for definitions<br>of existing default methods).</p>
<p>Response:</p>
<ul>
<li>Event’s name: string “OK”</li>
<li>Event’s args: tuple containing the returned value</li>
</ul>
<blockquote>
<p>Note that if the return value is a tuple, it is itself wrapped inside a<br>tuple - again, for backward compatibility reasons.</p>
</blockquote>
<p>If an error occurs (either at the transport level, or if an uncaught<br>exception is raised), we use the ERR event.</p>
<ul>
<li>Event’s name: string “ERR”</li>
<li>Event’s args: tuple of 3 strings:<ul>
<li>Name of the error (it should be the exception class name, or another<br>meaningful keyword).</li>
<li>Human representation of the error (preferably in english).</li>
<li>If possible a pretty printed traceback of the call stack when the error occured.</li>
</ul>
</li>
</ul>
<blockquote>
<p>A future version of the protocol will probably add a structured version of the<br>traceback, allowing machine-to-machine stack walking and better cross-language<br>exception representation.</p>
</blockquote>
<h2 id="Realize"><a href="#Realize" class="headerlink" title="Realize"></a>Realize</h2><h2 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h2><ul>
<li>Server</li>
<li>Client</li>
<li>ZMQ Socket</li>
<li>MessagePack</li>
<li>Event</li>
<li>Gevent</li>
<li>Channel</li>
<li>Queue</li>
</ul>
<h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><ul>
<li>Init server</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span><span class="params">(SocketBase, ServerBase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, methods=None, name=None, context=None, pool_size=None,</span><br><span class="line">            heartbeat=<span class="number">5</span>)</span>:</span></span><br><span class="line">        SocketBase.__init__(self, zmq.ROUTER, context)</span><br><span class="line">        <span class="keyword">if</span> methods <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            methods = self</span><br><span class="line">        name = name <span class="keyword">or</span> ServerBase._extract_name(methods)</span><br><span class="line">        methods = ServerBase._filter_methods(Server, self, methods)</span><br><span class="line">        ServerBase.__init__(self, self._events, methods, name, context,</span><br><span class="line">                pool_size, heartbeat)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServerBase</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, channel, methods=None, name=None, context=None,</span><br><span class="line">            pool_size=None, heartbeat=<span class="number">5</span>)</span>:</span></span><br><span class="line">        self._multiplexer = ChannelMultiplexer(channel)</span><br><span class="line">        <span class="keyword">if</span> methods <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            methods = self</span><br><span class="line">        self._context = context <span class="keyword">or</span> Context.get_instance()</span><br><span class="line">        self._name = name <span class="keyword">or</span> self._extract_name()</span><br><span class="line">        self._task_pool = gevent.pool.Pool(size=pool_size)</span><br><span class="line">        self._acceptor_task = <span class="keyword">None</span></span><br><span class="line">        self._methods = self._filter_methods(ServerBase, self, methods)</span><br><span class="line">        self._inject_builtins()</span><br><span class="line">        self._heartbeat_freq = heartbeat</span><br><span class="line">        <span class="keyword">for</span> (k, functor) <span class="keyword">in</span> iteritems(self._methods):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> isinstance(functor, DecoratorBase):</span><br><span class="line">                self._methods[k] = rep(functor)</span><br></pre></td></tr></table></figure>
<ul>
<li>Bind socket address</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bind</span><span class="params">(self, endpoint, resolve=True)</span>:</span></span><br><span class="line">    r = []</span><br><span class="line">    <span class="keyword">for</span> endpoint_ <span class="keyword">in</span> self._resolve_endpoint(endpoint, resolve):</span><br><span class="line">        r.append(self._socket.bind(endpoint_))</span><br><span class="line">        logger.debug(<span class="string">'bound to %s (status=%s)'</span>, endpoint_, r[-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure>
<ul>
<li>Receive client request</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">    self._acceptor_task = gevent.spawn(self._acceptor)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        self._acceptor_task.get()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        self.stop()</span><br><span class="line">        self._task_pool.join(raise_error=<span class="keyword">True</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_acceptor</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        initial_event = self._multiplexer.recv()</span><br><span class="line">        self._task_pool.spawn(self._async_task, initial_event)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_async_task</span><span class="params">(self, initial_event)</span>:</span></span><br><span class="line">    protocol_v1 = initial_event.header.get(<span class="string">u'v'</span>, <span class="number">1</span>) &lt; <span class="number">2</span></span><br><span class="line">    channel = self._multiplexer.channel(initial_event)</span><br><span class="line">    hbchan = HeartBeatOnChannel(channel, freq=self._heartbeat_freq,</span><br><span class="line">            passive=protocol_v1)</span><br><span class="line">    bufchan = BufferedChannel(hbchan)</span><br><span class="line">    exc_infos = <span class="keyword">None</span></span><br><span class="line">    event = bufchan.recv()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        self._context.hook_load_task_context(event.header)</span><br><span class="line">        functor = self._methods.get(event.name, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">if</span> functor <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> NameError(event.name)</span><br><span class="line">        functor.pattern.process_call(self._context, bufchan, event, functor)</span><br><span class="line">    <span class="keyword">except</span> LostRemote:</span><br><span class="line">        exc_infos = list(sys.exc_info())</span><br><span class="line">        self._print_traceback(protocol_v1, exc_infos)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        exc_infos = list(sys.exc_info())</span><br><span class="line">        human_exc_infos = self._print_traceback(protocol_v1, exc_infos)</span><br><span class="line">        reply_event = bufchan.new_event(<span class="string">u'ERR'</span>, human_exc_infos,</span><br><span class="line">                self._context.hook_get_task_context())</span><br><span class="line">        self._context.hook_server_inspect_exception(event, reply_event, exc_infos)</span><br><span class="line">        bufchan.emit_event(reply_event)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">del</span> exc_infos</span><br><span class="line">        bufchan.close()</span><br></pre></td></tr></table></figure>
<ul>
<li>Heartbeat check</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_heartbeat</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        gevent.sleep(self._heartbeat_freq)</span><br><span class="line">        <span class="keyword">if</span> self._remote_last_hb <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            self._remote_last_hb = time.time()</span><br><span class="line">        <span class="keyword">if</span> time.time() &gt; self._remote_last_hb + self._heartbeat_freq * <span class="number">2</span>:</span><br><span class="line">            self._lost_remote = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self._closed:</span><br><span class="line">                gevent.kill(self._parent_coroutine,</span><br><span class="line">                        self._lost_remote_exception())</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        self._channel.emit(<span class="string">u'_zpc_hb'</span>, (<span class="number">0</span>,))  <span class="comment"># 0 -&gt; compat with protocol v2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_recver</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        event = self._channel.recv()</span><br><span class="line">        <span class="keyword">if</span> self._compat_v2 <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            self._compat_v2 = event.header.get(<span class="string">u'v'</span>, <span class="number">0</span>) &lt; <span class="number">3</span></span><br><span class="line">        <span class="keyword">if</span> event.name == <span class="string">u'_zpc_hb'</span>:</span><br><span class="line">            self._remote_last_hb = time.time()</span><br><span class="line">            self._start_heartbeat()</span><br><span class="line">            <span class="keyword">if</span> self._compat_v2:</span><br><span class="line">                event.name = <span class="string">u'_zpc_more'</span></span><br><span class="line">                self._input_queue.put(event)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._input_queue.put(event)</span><br></pre></td></tr></table></figure>
<ul>
<li>Process and reply</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_call</span><span class="params">(self, context, channel, req_event, functor)</span>:</span></span><br><span class="line">    context.hook_server_before_exec(req_event)</span><br><span class="line">    result = functor(*req_event.args)</span><br><span class="line">    rep_event = channel.new_event(<span class="string">u'OK'</span>, (result,),</span><br><span class="line">            context.hook_get_task_context())</span><br><span class="line">    context.hook_server_after_exec(req_event, rep_event)</span><br><span class="line">    channel.emit_event(rep_event)</span><br></pre></td></tr></table></figure>
<h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><ul>
<li>Init client</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span><span class="params">(SocketBase, ClientBase)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, connect_to=None, context=None, timeout=<span class="number">30</span>, heartbeat=<span class="number">5</span>,</span><br><span class="line">            passive_heartbeat=False)</span>:</span></span><br><span class="line">        SocketBase.__init__(self, zmq.DEALER, context=context)</span><br><span class="line">        ClientBase.__init__(self, self._events, context, timeout, heartbeat,</span><br><span class="line">                passive_heartbeat)</span><br><span class="line">        <span class="keyword">if</span> connect_to:</span><br><span class="line">            self.connect(connect_to)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClientBase</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, channel, context=None, timeout=<span class="number">30</span>, heartbeat=<span class="number">5</span>,</span><br><span class="line">            passive_heartbeat=False)</span>:</span></span><br><span class="line">        self._multiplexer = ChannelMultiplexer(channel,</span><br><span class="line">                ignore_broadcast=<span class="keyword">True</span>)</span><br><span class="line">        self._context = context <span class="keyword">or</span> Context.get_instance()</span><br><span class="line">        self._timeout = timeout</span><br><span class="line">        self._heartbeat_freq = heartbeat</span><br><span class="line">        self._passive_heartbeat = passive_heartbeat</span><br></pre></td></tr></table></figure>
<ul>
<li>Connect socket address</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self, endpoint, resolve=True)</span>:</span></span><br><span class="line">    r = []</span><br><span class="line">    <span class="keyword">for</span> endpoint_ <span class="keyword">in</span> self._resolve_endpoint(endpoint, resolve):</span><br><span class="line">        r.append(self._socket.connect(endpoint_))</span><br><span class="line">        logger.debug(<span class="string">'connected to %s (status=%s)'</span>, endpoint_, r[-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure>
<ul>
<li>Send method request</li>
</ul>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def __call__(<span class="keyword">self</span>, <span class="function"><span class="keyword">method</span>, *<span class="title">args</span>, **<span class="title">kargs</span>):</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(<span class="function"><span class="keyword">method</span>, <span class="title">bytes</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">method</span> = <span class="title">method</span>.<span class="title">decode</span><span class="params">(<span class="string">'utf-8'</span>)</span></span><br><span class="line">    <span class="title">timeout</span> = <span class="title">kargs</span>.<span class="title">get</span><span class="params">(<span class="string">'timeout'</span>, <span class="keyword">self</span>._timeout)</span></span><br><span class="line">    <span class="title">channel</span> = <span class="title">self</span>._<span class="title">multiplexer</span>.<span class="title">channel</span><span class="params">()</span></span><br><span class="line">    <span class="title">hbchan</span> = <span class="title">HeartBeatOnChannel</span><span class="params">(channel, freq=<span class="keyword">self</span>._heartbeat_freq,</span><br><span class="line">            passive=<span class="keyword">self</span>._passive_heartbeat)</span></span><br><span class="line">    <span class="title">bufchan</span> = <span class="title">BufferedChannel</span><span class="params">(hbchan, inqueue_size=kargs.get(<span class="string">'slots'</span>, 100)</span>)</span><br><span class="line"></span><br><span class="line">    <span class="title">xheader</span> = <span class="title">self</span>._<span class="title">context</span>.<span class="title">hook_get_task_context</span><span class="params">()</span></span><br><span class="line">    <span class="title">request_event</span> = <span class="title">bufchan</span>.<span class="title">new_event</span><span class="params">(<span class="keyword">method</span>, args, xheader)</span></span><br><span class="line">    <span class="title">self</span>._<span class="title">context</span>.<span class="title">hook_client_before_request</span><span class="params">(request_event)</span></span><br><span class="line">    <span class="title">bufchan</span>.<span class="title">emit_event</span><span class="params">(request_event)</span></span><br><span class="line"></span><br><span class="line">    <span class="title">if</span> <span class="title">kargs</span>.<span class="title">get</span><span class="params">(<span class="string">'async'</span>, <span class="keyword">False</span>)</span> <span class="title">is</span> <span class="title">False</span>:</span></span><br><span class="line">        return <span class="keyword">self</span>._process_response(request_event, bufchan, timeout)</span><br><span class="line"></span><br><span class="line">    async_result = gevent.<span class="keyword">event</span>.AsyncResult()</span><br><span class="line">    gevent.spawn(<span class="keyword">self</span>._process_response, request_event, bufchan,</span><br><span class="line">            timeout).link(async_result)</span><br><span class="line">    return async_result</span><br></pre></td></tr></table></figure>
<ul>
<li>Heartbeat check</li>
<li>Receive result</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_process_response</span><span class="params">(self, request_event, bufchan, timeout)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">raise_error</span><span class="params">(ex)</span>:</span></span><br><span class="line">        bufchan.close()</span><br><span class="line">        self._context.hook_client_after_request(request_event, <span class="keyword">None</span>, ex)</span><br><span class="line">        <span class="keyword">raise</span> ex</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        reply_event = bufchan.recv(timeout=timeout)</span><br><span class="line">    <span class="keyword">except</span> TimeoutExpired:</span><br><span class="line">        raise_error(TimeoutExpired(timeout,</span><br><span class="line">                <span class="string">'calling remote method &#123;0&#125;'</span>.format(request_event.name)))</span><br><span class="line"></span><br><span class="line">    pattern = self._select_pattern(reply_event)</span><br><span class="line">    <span class="keyword">if</span> pattern <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        raise_error(RuntimeError(</span><br><span class="line">            <span class="string">'Unable to find a pattern for: &#123;0&#125;'</span>.format(request_event)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pattern.process_answer(self._context, bufchan, request_event,</span><br><span class="line">            reply_event, self._handle_remote_error)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_answer</span><span class="params">(self, context, channel, req_event, rep_event,</span><br><span class="line">        handle_remote_error)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> rep_event.name == <span class="string">u'ERR'</span>:</span><br><span class="line">            exception = handle_remote_error(rep_event)</span><br><span class="line">            context.hook_client_after_request(req_event, rep_event, exception)</span><br><span class="line">            <span class="keyword">raise</span> exception</span><br><span class="line">        context.hook_client_after_request(req_event, rep_event)</span><br><span class="line">        <span class="keyword">return</span> rep_event.args[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        channel.close()</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS中GCD多线程的使用]]></title>
      <url>zyidev.cn/2016/05/30/20160530/</url>
      <content type="html"><![CDATA[<p>　ios有三种多线程编程技术，分别是NSThread,Cocoa NSOperation和GCD,GCD全称Grand Central Dispatch 是Apple开发的一个多核编程的解决方法，在iOS4.0开始之后才能使用。GCD是一个可以替代NSThread, NSOperationQueue, NSInvocationOperation等技术的很高效和强大的技术，而且其使用起来比前两者更加的简单方便，今天主要给大家介绍一下有关GCD的使用。<br>　　GCD的工作原理是：让程序平行排队的特定任务，根据可用的处理资源，安排他们在任何可用的处理器核心上执行任务。一个任务可以是一个函数或者是一个语句块（block）,GCD的依然是用线程实现，不过这样可以让普通开发者不用去关注其实现的细节,GCD中的队列称为dispatch queue。<br>Dispatch Queue分为三种：</p>
<blockquote>
<ol>
<li>Serial Dispatch Queue: 线性执行的线程队列，遵循FIFO(First In First Out)原则;</li>
<li>Concurrent Dispatch Queue: 并发执行的线程队列，并发执行的处理数取决于当前状态;</li>
<li>Main Dispatch Queue:在应用程序主线程上执行任务。 </li>
</ol>
</blockquote>
<hr>
<h2 id="dispatch-async"><a href="#dispatch-async" class="headerlink" title="dispatch_async"></a>dispatch_async</h2><p> 有的时候避免界面在处理耗时的操作时卡死，比如发起网络请求，下载数据，缓存图片等，我们需要在另外<br> 一个线程中处理这些操作，在这些操作完成后再通知主线程更新界面，看下面一段代码:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">        <span class="comment">//耗时操作</span></span><br><span class="line">        <span class="built_in">NSDate</span>* date = [<span class="built_in">NSDate</span> date];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"------%@"</span>,date);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSURL</span> * url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://d.hiphotos.baidu.com/image/pic/item/0823dd54564e9258ca2f34e79e82d158ccbf4e9b.jpg"</span>];</span><br><span class="line">        <span class="built_in">NSData</span> * data = [[<span class="built_in">NSData</span> alloc]initWithContentsOfURL:url];</span><br><span class="line">        <span class="built_in">UIImage</span> *image = [[<span class="built_in">UIImage</span> alloc]initWithData:data];</span><br><span class="line">        [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">4</span>];<span class="comment">//为了体现多线程的特点 在这里设置一个延时</span></span><br><span class="line">        <span class="keyword">if</span> (data != <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                <span class="comment">//结果处理</span></span><br><span class="line">                <span class="built_in">UIImageView</span>* imageview = [[<span class="built_in">UIImageView</span> alloc]initWithImage:image];</span><br><span class="line">                imageview<span class="variable">.frame</span> = [<span class="built_in">UIScreen</span> mainScreen]<span class="variable">.bounds</span>;</span><br><span class="line">                [<span class="keyword">self</span><span class="variable">.view</span> addSubview:imageview];</span><br><span class="line">                <span class="built_in">NSDate</span>* date = [<span class="built_in">NSDate</span> date];</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"------%@"</span>,date);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;);</span><br></pre></td></tr></table></figure></p>
<p> 我们在一个线程里完成下载图片的动作（为了体现多线程的作用，我们在这里设置一个延时）然后在另一个线程里把图片显示出来。<br> 系统给每个应用都提供的有队列，所以一般不用我们手动的去创建，我们只需要通过函数去获取队列就可以了<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 获取Main Dispatch Queue</span></span><br><span class="line"><span class="keyword">dispatch_queue_t</span> mainDispatchQueue = dispatch_get_main_queue();</span><br><span class="line"><span class="comment">// 获取Global Dispatch Queue</span></span><br><span class="line"><span class="keyword">dispatch_queue_t</span> globalDispatchQueueDefault = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="dispatch-group-async"><a href="#dispatch-group-async" class="headerlink" title="dispatch_group_async"></a>dispatch_group_async</h2><p>dispatch_group_async可以实现一组任务的监听，在一系列任务完成后再进行其他的操作。看一段例子：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line">dispatch_group_t group = dispatch_group_create();</span><br><span class="line">dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"线程1"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"线程2"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"线程3"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">　　<span class="comment">//dispatch_group_notify函数用来指定一个额外的block，该block将在group中所有任务完成后执行</span></span><br><span class="line">dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"更新操作"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>执行结果为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">线程<span class="number">1</span></span><br><span class="line">线程<span class="number">3</span></span><br><span class="line">线程<span class="number">2</span></span><br><span class="line">更新操作</span><br></pre></td></tr></table></figure></p>
<p>由结果可以看出，3个线程都执行完成后，更新操作才执行</p>
<hr>
<h2 id="dispatch-barrier-async"><a href="#dispatch-barrier-async" class="headerlink" title="dispatch_barrier_async"></a>dispatch_barrier_async</h2><p><em>dispatch_barrier_async</em>是在前面的任务执行结束后才执行，而且它后面的任务等它执行完成之后才会执行<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"gcdtest2"</span>, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程1"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">5</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程2"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    dispatch_barrier_async(queue, ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"barrier执行"</span>);</span><br><span class="line">        [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">5</span>];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程4"</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p>
<p>执行结果为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">线程<span class="number">1</span></span><br><span class="line">线程<span class="number">2</span></span><br><span class="line">barrier执行</span><br><span class="line">线程<span class="number">4</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="关于线程死锁"><a href="#关于线程死锁" class="headerlink" title="关于线程死锁"></a>关于线程死锁</h2><p>想想下面一段代码如果在主线程中执行会发生什么：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">   DLog(<span class="string">@"????????"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>在解决这个问题前 我们需要先了解同步（synchronization）\ 异步（asynchronization），串行（serial）\ 并行（concurrency）的区别。</p>
<p>同步和异步是针对当前当前线程和加入队列中的任务之间执行顺序的关系而言的。以同步的方式向队列中添加任务，会阻塞当前线程，直到同步到队列中的任务执行完毕返回后，才会接着执行当前的线程中的其他任务；以异步的方式向队列中添加的任务则不会阻塞当前线程，将任务添加到队列中后，不用等待前面添加的任务执行完毕。</p>
<p>串行和并行是针对一个队列中的多个任务执行顺序而言的。串行队列是指队列中的任务是一个接一个地执行的，队首的任务执行完毕后才能执行其后面的任务，直至执行队尾的任务；并行队列是指队列中的任务可以并发地执行，即开始执行队首的任务后，不必等其执行完毕就可以接着开始执行队首之后的任务，因此在某一时刻可能存在同时执行的多个任务。</p>
<p>所以上面的问题就很明显了，线程会被阻塞造成死锁。因为主线程是串行队列，里面的任务需要顺序执行，而在主线程中调用主线程执行任务x，任务x需要等待主线程任务执行完成，而x又持有主线程导致主线程的任务无法完成，所以就造成了死锁，Apple在iOS7以后废弃了<em>dispatch_get_current_queue</em>方法 应该也是出于这个考虑。</p>
]]></content>
    </entry>
    
  
  
</search>
