<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[iOS中GCD多线程的使用]]></title>
      <url>zyidev.com/2016/05/30/20160530/</url>
      <content type="html"><![CDATA[<p>　ios有三种多线程编程技术，分别是NSThread,Cocoa NSOperation和GCD,GCD全称Grand Central Dispatch 是Apple开发的一个多核编程的解决方法，在iOS4.0开始之后才能使用。GCD是一个可以替代NSThread, NSOperationQueue, NSInvocationOperation等技术的很高效和强大的技术，而且其使用起来比前两者更加的简单方便，今天主要给大家介绍一下有关GCD的使用。<br>　　GCD的工作原理是：让程序平行排队的特定任务，根据可用的处理资源，安排他们在任何可用的处理器核心上执行任务。一个任务可以是一个函数或者是一个语句块（block）,GCD的依然是用线程实现，不过这样可以让普通开发者不用去关注其实现的细节,GCD中的队列称为dispatch queue。<br>Dispatch Queue分为三种：</p>
<blockquote>
<ol>
<li>Serial Dispatch Queue: 线性执行的线程队列，遵循FIFO(First In First Out)原则;</li>
<li>Concurrent Dispatch Queue: 并发执行的线程队列，并发执行的处理数取决于当前状态;</li>
<li>Main Dispatch Queue:在应用程序主线程上执行任务。 </li>
</ol>
</blockquote>
<hr>
<h2 id="dispatch-async"><a href="#dispatch-async" class="headerlink" title="dispatch_async"></a>dispatch_async</h2><p> 有的时候避免界面在处理耗时的操作时卡死，比如发起网络请求，下载数据，缓存图片等，我们需要在另外<br> 一个线程中处理这些操作，在这些操作完成后再通知主线程更新界面，看下面一段代码:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">        <span class="comment">//耗时操作</span></span><br><span class="line">        <span class="built_in">NSDate</span>* date = [<span class="built_in">NSDate</span> date];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"------%@"</span>,date);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSURL</span> * url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://d.hiphotos.baidu.com/image/pic/item/0823dd54564e9258ca2f34e79e82d158ccbf4e9b.jpg"</span>];</span><br><span class="line">        <span class="built_in">NSData</span> * data = [[<span class="built_in">NSData</span> alloc]initWithContentsOfURL:url];</span><br><span class="line">        <span class="built_in">UIImage</span> *image = [[<span class="built_in">UIImage</span> alloc]initWithData:data];</span><br><span class="line">        [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">4</span>];<span class="comment">//为了体现多线程的特点 在这里设置一个延时</span></span><br><span class="line">        <span class="keyword">if</span> (data != <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                <span class="comment">//结果处理</span></span><br><span class="line">                <span class="built_in">UIImageView</span>* imageview = [[<span class="built_in">UIImageView</span> alloc]initWithImage:image];</span><br><span class="line">                imageview<span class="variable">.frame</span> = [<span class="built_in">UIScreen</span> mainScreen]<span class="variable">.bounds</span>;</span><br><span class="line">                [<span class="keyword">self</span><span class="variable">.view</span> addSubview:imageview];</span><br><span class="line">                <span class="built_in">NSDate</span>* date = [<span class="built_in">NSDate</span> date];</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"------%@"</span>,date);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;);</span><br></pre></td></tr></table></figure></p>
<p> 我们在一个线程里完成下载图片的动作（为了体现多线程的作用，我们在这里设置一个延时）然后在另一个线程里把图片显示出来。<br> 系统给每个应用都提供的有队列，所以一般不用我们手动的去创建，我们只需要通过函数去获取队列就可以了<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 获取Main Dispatch Queue</span></span><br><span class="line"><span class="keyword">dispatch_queue_t</span> mainDispatchQueue = dispatch_get_main_queue();</span><br><span class="line"><span class="comment">// 获取Global Dispatch Queue</span></span><br><span class="line"><span class="keyword">dispatch_queue_t</span> globalDispatchQueueDefault = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="dispatch-group-async"><a href="#dispatch-group-async" class="headerlink" title="dispatch_group_async"></a>dispatch_group_async</h2><p>dispatch_group_async可以实现一组任务的监听，在一系列任务完成后再进行其他的操作。看一段例子：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line">dispatch_group_t group = dispatch_group_create();</span><br><span class="line">dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"线程1"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"线程2"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"线程3"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">　　<span class="comment">//dispatch_group_notify函数用来指定一个额外的block，该block将在group中所有任务完成后执行</span></span><br><span class="line">dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"更新操作"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>执行结果为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">线程<span class="number">1</span></span><br><span class="line">线程<span class="number">3</span></span><br><span class="line">线程<span class="number">2</span></span><br><span class="line">更新操作</span><br></pre></td></tr></table></figure></p>
<p>由结果可以看出，3个线程都执行完成后，更新操作才执行</p>
<hr>
<h2 id="dispatch-barrier-async"><a href="#dispatch-barrier-async" class="headerlink" title="dispatch_barrier_async"></a>dispatch_barrier_async</h2><p><em>dispatch_barrier_async</em>是在前面的任务执行结束后才执行，而且它后面的任务等它执行完成之后才会执行<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"gcdtest2"</span>, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程1"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">5</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程2"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    dispatch_barrier_async(queue, ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"barrier执行"</span>);</span><br><span class="line">        [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">5</span>];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程4"</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p>
<p>执行结果为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">线程<span class="number">1</span></span><br><span class="line">线程<span class="number">2</span></span><br><span class="line">barrier执行</span><br><span class="line">线程<span class="number">4</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="关于线程死锁"><a href="#关于线程死锁" class="headerlink" title="关于线程死锁"></a>关于线程死锁</h2><p>想想下面一段代码如果在主线程中执行会发生什么：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">   DLog(<span class="string">@"????????"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>在解决这个问题前 我们需要先了解同步（synchronization）\ 异步（asynchronization），串行（serial）\ 并行（concurrency）的区别。</p>
<p>同步和异步是针对当前当前线程和加入队列中的任务之间执行顺序的关系而言的。以同步的方式向队列中添加任务，会阻塞当前线程，直到同步到队列中的任务执行完毕返回后，才会接着执行当前的线程中的其他任务；以异步的方式向队列中添加的任务则不会阻塞当前线程，将任务添加到队列中后，不用等待前面添加的任务执行完毕。</p>
<p>串行和并行是针对一个队列中的多个任务执行顺序而言的。串行队列是指队列中的任务是一个接一个地执行的，队首的任务执行完毕后才能执行其后面的任务，直至执行队尾的任务；并行队列是指队列中的任务可以并发地执行，即开始执行队首的任务后，不必等其执行完毕就可以接着开始执行队首之后的任务，因此在某一时刻可能存在同时执行的多个任务。</p>
<p>所以上面的问题就很明显了，线程会被阻塞造成死锁。因为主线程是串行队列，里面的任务需要顺序执行，而在主线程中调用主线程执行任务x，任务x需要等待主线程任务执行完成，而x又持有主线程导致主线程的任务无法完成，所以就造成了死锁，Apple在iOS7以后废弃了<em>dispatch_get_current_queue</em>方法 应该也是出于这个考虑。</p>
]]></content>
    </entry>
    
  
  
</search>
